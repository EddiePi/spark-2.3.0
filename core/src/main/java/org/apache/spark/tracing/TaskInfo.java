/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.tracing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-16")
public class TaskInfo implements org.apache.thrift.TBase<TaskInfo, TaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskInfo");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STAGE_ATTEMPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageAttemptId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EXEC_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("execMemory", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STORE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("storeMemory", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CONTAINER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("containerId", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskInfoTupleSchemeFactory());
  }

  public long taskId; // required
  public int stageId; // required
  public int stageAttemptId; // required
  public int jobId; // required
  public String appId; // required
  public long startTime; // required
  public long finishTime; // required
  public double cpuUsage; // required
  public long execMemory; // required
  public long storeMemory; // required
  public String status; // required
  public String containerId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    STAGE_ID((short)2, "stageId"),
    STAGE_ATTEMPT_ID((short)3, "stageAttemptId"),
    JOB_ID((short)4, "jobId"),
    APP_ID((short)5, "appId"),
    START_TIME((short)6, "startTime"),
    FINISH_TIME((short)7, "finishTime"),
    CPU_USAGE((short)8, "cpuUsage"),
    EXEC_MEMORY((short)9, "execMemory"),
    STORE_MEMORY((short)10, "storeMemory"),
    STATUS((short)11, "status"),
    CONTAINER_ID((short)12, "containerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // STAGE_ID
          return STAGE_ID;
        case 3: // STAGE_ATTEMPT_ID
          return STAGE_ATTEMPT_ID;
        case 4: // JOB_ID
          return JOB_ID;
        case 5: // APP_ID
          return APP_ID;
        case 6: // START_TIME
          return START_TIME;
        case 7: // FINISH_TIME
          return FINISH_TIME;
        case 8: // CPU_USAGE
          return CPU_USAGE;
        case 9: // EXEC_MEMORY
          return EXEC_MEMORY;
        case 10: // STORE_MEMORY
          return STORE_MEMORY;
        case 11: // STATUS
          return STATUS;
        case 12: // CONTAINER_ID
          return CONTAINER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __STAGEID_ISSET_ID = 1;
  private static final int __STAGEATTEMPTID_ISSET_ID = 2;
  private static final int __JOBID_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __FINISHTIME_ISSET_ID = 5;
  private static final int __CPUUSAGE_ISSET_ID = 6;
  private static final int __EXECMEMORY_ISSET_ID = 7;
  private static final int __STOREMEMORY_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAGE_ATTEMPT_ID, new org.apache.thrift.meta_data.FieldMetaData("stageAttemptId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXEC_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("execMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("storeMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTAINER_ID, new org.apache.thrift.meta_data.FieldMetaData("containerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskInfo.class, metaDataMap);
  }

  public TaskInfo() {
  }

  public TaskInfo(
    long taskId,
    int stageId,
    int stageAttemptId,
    int jobId,
    String appId,
    long startTime,
    long finishTime,
    double cpuUsage,
    long execMemory,
    long storeMemory,
    String status,
    String containerId)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.stageAttemptId = stageAttemptId;
    setStageAttemptIdIsSet(true);
    this.jobId = jobId;
    setJobIdIsSet(true);
    this.appId = appId;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    this.execMemory = execMemory;
    setExecMemoryIsSet(true);
    this.storeMemory = storeMemory;
    setStoreMemoryIsSet(true);
    this.status = status;
    this.containerId = containerId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskInfo(TaskInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    this.stageId = other.stageId;
    this.stageAttemptId = other.stageAttemptId;
    this.jobId = other.jobId;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    this.startTime = other.startTime;
    this.finishTime = other.finishTime;
    this.cpuUsage = other.cpuUsage;
    this.execMemory = other.execMemory;
    this.storeMemory = other.storeMemory;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetContainerId()) {
      this.containerId = other.containerId;
    }
  }

  public TaskInfo deepCopy() {
    return new TaskInfo(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    setStageIdIsSet(false);
    this.stageId = 0;
    setStageAttemptIdIsSet(false);
    this.stageAttemptId = 0;
    setJobIdIsSet(false);
    this.jobId = 0;
    this.appId = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    setCpuUsageIsSet(false);
    this.cpuUsage = 0.0;
    setExecMemoryIsSet(false);
    this.execMemory = 0;
    setStoreMemoryIsSet(false);
    this.storeMemory = 0;
    this.status = null;
    this.containerId = null;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public TaskInfo setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getStageId() {
    return this.stageId;
  }

  public TaskInfo setStageId(int stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public int getStageAttemptId() {
    return this.stageAttemptId;
  }

  public TaskInfo setStageAttemptId(int stageAttemptId) {
    this.stageAttemptId = stageAttemptId;
    setStageAttemptIdIsSet(true);
    return this;
  }

  public void unsetStageAttemptId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEATTEMPTID_ISSET_ID);
  }

  /** Returns true if field stageAttemptId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageAttemptId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEATTEMPTID_ISSET_ID);
  }

  public void setStageAttemptIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEATTEMPTID_ISSET_ID, value);
  }

  public int getJobId() {
    return this.jobId;
  }

  public TaskInfo setJobId(int jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public String getAppId() {
    return this.appId;
  }

  public TaskInfo setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public TaskInfo setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getFinishTime() {
    return this.finishTime;
  }

  public TaskInfo setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  public double getCpuUsage() {
    return this.cpuUsage;
  }

  public TaskInfo setCpuUsage(double cpuUsage) {
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    return this;
  }

  public void unsetCpuUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
  }

  /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
  }

  public void setCpuUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUUSAGE_ISSET_ID, value);
  }

  public long getExecMemory() {
    return this.execMemory;
  }

  public TaskInfo setExecMemory(long execMemory) {
    this.execMemory = execMemory;
    setExecMemoryIsSet(true);
    return this;
  }

  public void unsetExecMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECMEMORY_ISSET_ID);
  }

  /** Returns true if field execMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetExecMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECMEMORY_ISSET_ID);
  }

  public void setExecMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECMEMORY_ISSET_ID, value);
  }

  public long getStoreMemory() {
    return this.storeMemory;
  }

  public TaskInfo setStoreMemory(long storeMemory) {
    this.storeMemory = storeMemory;
    setStoreMemoryIsSet(true);
    return this;
  }

  public void unsetStoreMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOREMEMORY_ISSET_ID);
  }

  /** Returns true if field storeMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __STOREMEMORY_ISSET_ID);
  }

  public void setStoreMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOREMEMORY_ISSET_ID, value);
  }

  public String getStatus() {
    return this.status;
  }

  public TaskInfo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getContainerId() {
    return this.containerId;
  }

  public TaskInfo setContainerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  public void unsetContainerId() {
    this.containerId = null;
  }

  /** Returns true if field containerId is set (has been assigned a value) and false otherwise */
  public boolean isSetContainerId() {
    return this.containerId != null;
  }

  public void setContainerIdIsSet(boolean value) {
    if (!value) {
      this.containerId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((Integer)value);
      }
      break;

    case STAGE_ATTEMPT_ID:
      if (value == null) {
        unsetStageAttemptId();
      } else {
        setStageAttemptId((Integer)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((Integer)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    case CPU_USAGE:
      if (value == null) {
        unsetCpuUsage();
      } else {
        setCpuUsage((Double)value);
      }
      break;

    case EXEC_MEMORY:
      if (value == null) {
        unsetExecMemory();
      } else {
        setExecMemory((Long)value);
      }
      break;

    case STORE_MEMORY:
      if (value == null) {
        unsetStoreMemory();
      } else {
        setStoreMemory((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CONTAINER_ID:
      if (value == null) {
        unsetContainerId();
      } else {
        setContainerId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Long.valueOf(getTaskId());

    case STAGE_ID:
      return Integer.valueOf(getStageId());

    case STAGE_ATTEMPT_ID:
      return Integer.valueOf(getStageAttemptId());

    case JOB_ID:
      return Integer.valueOf(getJobId());

    case APP_ID:
      return getAppId();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case FINISH_TIME:
      return Long.valueOf(getFinishTime());

    case CPU_USAGE:
      return Double.valueOf(getCpuUsage());

    case EXEC_MEMORY:
      return Long.valueOf(getExecMemory());

    case STORE_MEMORY:
      return Long.valueOf(getStoreMemory());

    case STATUS:
      return getStatus();

    case CONTAINER_ID:
      return getContainerId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case STAGE_ID:
      return isSetStageId();
    case STAGE_ATTEMPT_ID:
      return isSetStageAttemptId();
    case JOB_ID:
      return isSetJobId();
    case APP_ID:
      return isSetAppId();
    case START_TIME:
      return isSetStartTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case CPU_USAGE:
      return isSetCpuUsage();
    case EXEC_MEMORY:
      return isSetExecMemory();
    case STORE_MEMORY:
      return isSetStoreMemory();
    case STATUS:
      return isSetStatus();
    case CONTAINER_ID:
      return isSetContainerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskInfo)
      return this.equals((TaskInfo)that);
    return false;
  }

  public boolean equals(TaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_stageAttemptId = true;
    boolean that_present_stageAttemptId = true;
    if (this_present_stageAttemptId || that_present_stageAttemptId) {
      if (!(this_present_stageAttemptId && that_present_stageAttemptId))
        return false;
      if (this.stageAttemptId != that.stageAttemptId)
        return false;
    }

    boolean this_present_jobId = true;
    boolean that_present_jobId = true;
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_cpuUsage = true;
    boolean that_present_cpuUsage = true;
    if (this_present_cpuUsage || that_present_cpuUsage) {
      if (!(this_present_cpuUsage && that_present_cpuUsage))
        return false;
      if (this.cpuUsage != that.cpuUsage)
        return false;
    }

    boolean this_present_execMemory = true;
    boolean that_present_execMemory = true;
    if (this_present_execMemory || that_present_execMemory) {
      if (!(this_present_execMemory && that_present_execMemory))
        return false;
      if (this.execMemory != that.execMemory)
        return false;
    }

    boolean this_present_storeMemory = true;
    boolean that_present_storeMemory = true;
    if (this_present_storeMemory || that_present_storeMemory) {
      if (!(this_present_storeMemory && that_present_storeMemory))
        return false;
      if (this.storeMemory != that.storeMemory)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_containerId = true && this.isSetContainerId();
    boolean that_present_containerId = true && that.isSetContainerId();
    if (this_present_containerId || that_present_containerId) {
      if (!(this_present_containerId && that_present_containerId))
        return false;
      if (!this.containerId.equals(that.containerId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_stageId = true;
    list.add(present_stageId);
    if (present_stageId)
      list.add(stageId);

    boolean present_stageAttemptId = true;
    list.add(present_stageAttemptId);
    if (present_stageAttemptId)
      list.add(stageAttemptId);

    boolean present_jobId = true;
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_finishTime = true;
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_cpuUsage = true;
    list.add(present_cpuUsage);
    if (present_cpuUsage)
      list.add(cpuUsage);

    boolean present_execMemory = true;
    list.add(present_execMemory);
    if (present_execMemory)
      list.add(execMemory);

    boolean present_storeMemory = true;
    list.add(present_storeMemory);
    if (present_storeMemory)
      list.add(storeMemory);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_containerId = true && (isSetContainerId());
    list.add(present_containerId);
    if (present_containerId)
      list.add(containerId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageId()).compareTo(other.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, other.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageAttemptId()).compareTo(other.isSetStageAttemptId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageAttemptId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageAttemptId, other.stageAttemptId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(other.isSetCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, other.cpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecMemory()).compareTo(other.isSetExecMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execMemory, other.execMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreMemory()).compareTo(other.isSetStoreMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeMemory, other.storeMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainerId()).compareTo(other.isSetContainerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerId, other.containerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskInfo(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageAttemptId:");
    sb.append(this.stageAttemptId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    sb.append(this.jobId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUsage:");
    sb.append(this.cpuUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("execMemory:");
    sb.append(this.execMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeMemory:");
    sb.append(this.storeMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("containerId:");
    if (this.containerId == null) {
      sb.append("null");
    } else {
      sb.append(this.containerId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskInfoStandardSchemeFactory implements SchemeFactory {
    public TaskInfoStandardScheme getScheme() {
      return new TaskInfoStandardScheme();
    }
  }

  private static class TaskInfoStandardScheme extends StandardScheme<TaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageId = iprot.readI32();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STAGE_ATTEMPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageAttemptId = iprot.readI32();
              struct.setStageAttemptIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobId = iprot.readI32();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishTime = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuUsage = iprot.readDouble();
              struct.setCpuUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXEC_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execMemory = iprot.readI64();
              struct.setExecMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STORE_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.storeMemory = iprot.readI64();
              struct.setStoreMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTAINER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.containerId = iprot.readString();
              struct.setContainerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAGE_ATTEMPT_ID_FIELD_DESC);
      oprot.writeI32(struct.stageAttemptId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobId);
      oprot.writeFieldEnd();
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.finishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
      oprot.writeDouble(struct.cpuUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXEC_MEMORY_FIELD_DESC);
      oprot.writeI64(struct.execMemory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORE_MEMORY_FIELD_DESC);
      oprot.writeI64(struct.storeMemory);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.containerId != null) {
        oprot.writeFieldBegin(CONTAINER_ID_FIELD_DESC);
        oprot.writeString(struct.containerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskInfoTupleSchemeFactory implements SchemeFactory {
    public TaskInfoTupleScheme getScheme() {
      return new TaskInfoTupleScheme();
    }
  }

  private static class TaskInfoTupleScheme extends TupleScheme<TaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetStageId()) {
        optionals.set(1);
      }
      if (struct.isSetStageAttemptId()) {
        optionals.set(2);
      }
      if (struct.isSetJobId()) {
        optionals.set(3);
      }
      if (struct.isSetAppId()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(6);
      }
      if (struct.isSetCpuUsage()) {
        optionals.set(7);
      }
      if (struct.isSetExecMemory()) {
        optionals.set(8);
      }
      if (struct.isSetStoreMemory()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetContainerId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.taskId);
      }
      if (struct.isSetStageId()) {
        oprot.writeI32(struct.stageId);
      }
      if (struct.isSetStageAttemptId()) {
        oprot.writeI32(struct.stageAttemptId);
      }
      if (struct.isSetJobId()) {
        oprot.writeI32(struct.jobId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI64(struct.finishTime);
      }
      if (struct.isSetCpuUsage()) {
        oprot.writeDouble(struct.cpuUsage);
      }
      if (struct.isSetExecMemory()) {
        oprot.writeI64(struct.execMemory);
      }
      if (struct.isSetStoreMemory()) {
        oprot.writeI64(struct.storeMemory);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetContainerId()) {
        oprot.writeString(struct.containerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stageId = iprot.readI32();
        struct.setStageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stageAttemptId = iprot.readI32();
        struct.setStageAttemptIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jobId = iprot.readI32();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.finishTime = iprot.readI64();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cpuUsage = iprot.readDouble();
        struct.setCpuUsageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.execMemory = iprot.readI64();
        struct.setExecMemoryIsSet(true);
      }
      if (incoming.get(9)) {
        struct.storeMemory = iprot.readI64();
        struct.setStoreMemoryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.containerId = iprot.readString();
        struct.setContainerIdIsSet(true);
      }
    }
  }

}

