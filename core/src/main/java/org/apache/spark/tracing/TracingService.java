/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.tracing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-16")
public class TracingService {

  public interface Iface {

    public void updateTaskInfo(TaskInfo task) throws TException;

    public void updateStageInfo(StageInfo stage) throws TException;

    public void updateJobInfo(JobInfo job) throws TException;

    public void notifyCommonEvent(SchedulerEvent event) throws TException;

    public void notifyTaskEndEvent(TaskEndEvent event) throws TException;

    public void notifyContainerEvent(ContainerEvent evnet) throws TException;

  }

  public interface AsyncIface {

    public void updateTaskInfo(TaskInfo task, AsyncMethodCallback resultHandler) throws TException;

    public void updateStageInfo(StageInfo stage, AsyncMethodCallback resultHandler) throws TException;

    public void updateJobInfo(JobInfo job, AsyncMethodCallback resultHandler) throws TException;

    public void notifyCommonEvent(SchedulerEvent event, AsyncMethodCallback resultHandler) throws TException;

    public void notifyTaskEndEvent(TaskEndEvent event, AsyncMethodCallback resultHandler) throws TException;

    public void notifyContainerEvent(ContainerEvent evnet, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void updateTaskInfo(TaskInfo task) throws TException
    {
      send_updateTaskInfo(task);
      recv_updateTaskInfo();
    }

    public void send_updateTaskInfo(TaskInfo task) throws TException
    {
      updateTaskInfo_args args = new updateTaskInfo_args();
      args.setTask(task);
      sendBase("updateTaskInfo", args);
    }

    public void recv_updateTaskInfo() throws TException
    {
      updateTaskInfo_result result = new updateTaskInfo_result();
      receiveBase(result, "updateTaskInfo");
      return;
    }

    public void updateStageInfo(StageInfo stage) throws TException
    {
      send_updateStageInfo(stage);
      recv_updateStageInfo();
    }

    public void send_updateStageInfo(StageInfo stage) throws TException
    {
      updateStageInfo_args args = new updateStageInfo_args();
      args.setStage(stage);
      sendBase("updateStageInfo", args);
    }

    public void recv_updateStageInfo() throws TException
    {
      updateStageInfo_result result = new updateStageInfo_result();
      receiveBase(result, "updateStageInfo");
      return;
    }

    public void updateJobInfo(JobInfo job) throws TException
    {
      send_updateJobInfo(job);
      recv_updateJobInfo();
    }

    public void send_updateJobInfo(JobInfo job) throws TException
    {
      updateJobInfo_args args = new updateJobInfo_args();
      args.setJob(job);
      sendBase("updateJobInfo", args);
    }

    public void recv_updateJobInfo() throws TException
    {
      updateJobInfo_result result = new updateJobInfo_result();
      receiveBase(result, "updateJobInfo");
      return;
    }

    public void notifyCommonEvent(SchedulerEvent event) throws TException
    {
      send_notifyCommonEvent(event);
      recv_notifyCommonEvent();
    }

    public void send_notifyCommonEvent(SchedulerEvent event) throws TException
    {
      notifyCommonEvent_args args = new notifyCommonEvent_args();
      args.setEvent(event);
      sendBase("notifyCommonEvent", args);
    }

    public void recv_notifyCommonEvent() throws TException
    {
      notifyCommonEvent_result result = new notifyCommonEvent_result();
      receiveBase(result, "notifyCommonEvent");
      return;
    }

    public void notifyTaskEndEvent(TaskEndEvent event) throws TException
    {
      send_notifyTaskEndEvent(event);
      recv_notifyTaskEndEvent();
    }

    public void send_notifyTaskEndEvent(TaskEndEvent event) throws TException
    {
      notifyTaskEndEvent_args args = new notifyTaskEndEvent_args();
      args.setEvent(event);
      sendBase("notifyTaskEndEvent", args);
    }

    public void recv_notifyTaskEndEvent() throws TException
    {
      notifyTaskEndEvent_result result = new notifyTaskEndEvent_result();
      receiveBase(result, "notifyTaskEndEvent");
      return;
    }

    public void notifyContainerEvent(ContainerEvent evnet) throws TException
    {
      send_notifyContainerEvent(evnet);
      recv_notifyContainerEvent();
    }

    public void send_notifyContainerEvent(ContainerEvent evnet) throws TException
    {
      notifyContainerEvent_args args = new notifyContainerEvent_args();
      args.setEvnet(evnet);
      sendBase("notifyContainerEvent", args);
    }

    public void recv_notifyContainerEvent() throws TException
    {
      notifyContainerEvent_result result = new notifyContainerEvent_result();
      receiveBase(result, "notifyContainerEvent");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateTaskInfo(TaskInfo task, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateTaskInfo_call method_call = new updateTaskInfo_call(task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TaskInfo task;
      public updateTaskInfo_call(TaskInfo task, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskInfo_args args = new updateTaskInfo_args();
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateTaskInfo();
      }
    }

    public void updateStageInfo(StageInfo stage, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateStageInfo_call method_call = new updateStageInfo_call(stage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStageInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StageInfo stage;
      public updateStageInfo_call(StageInfo stage, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stage = stage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStageInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStageInfo_args args = new updateStageInfo_args();
        args.setStage(stage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateStageInfo();
      }
    }

    public void updateJobInfo(JobInfo job, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateJobInfo_call method_call = new updateJobInfo_call(job, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateJobInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobInfo job;
      public updateJobInfo_call(JobInfo job, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateJobInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateJobInfo_args args = new updateJobInfo_args();
        args.setJob(job);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateJobInfo();
      }
    }

    public void notifyCommonEvent(SchedulerEvent event, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      notifyCommonEvent_call method_call = new notifyCommonEvent_call(event, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyCommonEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SchedulerEvent event;
      public notifyCommonEvent_call(SchedulerEvent event, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.event = event;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyCommonEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyCommonEvent_args args = new notifyCommonEvent_args();
        args.setEvent(event);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyCommonEvent();
      }
    }

    public void notifyTaskEndEvent(TaskEndEvent event, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      notifyTaskEndEvent_call method_call = new notifyTaskEndEvent_call(event, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyTaskEndEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TaskEndEvent event;
      public notifyTaskEndEvent_call(TaskEndEvent event, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.event = event;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyTaskEndEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyTaskEndEvent_args args = new notifyTaskEndEvent_args();
        args.setEvent(event);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyTaskEndEvent();
      }
    }

    public void notifyContainerEvent(ContainerEvent evnet, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      notifyContainerEvent_call method_call = new notifyContainerEvent_call(evnet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyContainerEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ContainerEvent evnet;
      public notifyContainerEvent_call(ContainerEvent evnet, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.evnet = evnet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyContainerEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyContainerEvent_args args = new notifyContainerEvent_args();
        args.setEvnet(evnet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyContainerEvent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateTaskInfo", new updateTaskInfo());
      processMap.put("updateStageInfo", new updateStageInfo());
      processMap.put("updateJobInfo", new updateJobInfo());
      processMap.put("notifyCommonEvent", new notifyCommonEvent());
      processMap.put("notifyTaskEndEvent", new notifyTaskEndEvent());
      processMap.put("notifyContainerEvent", new notifyContainerEvent());
      return processMap;
    }

    public static class updateTaskInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskInfo_args> {
      public updateTaskInfo() {
        super("updateTaskInfo");
      }

      public updateTaskInfo_args getEmptyArgsInstance() {
        return new updateTaskInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskInfo_result getResult(I iface, updateTaskInfo_args args) throws TException {
        updateTaskInfo_result result = new updateTaskInfo_result();
        iface.updateTaskInfo(args.task);
        return result;
      }
    }

    public static class updateStageInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStageInfo_args> {
      public updateStageInfo() {
        super("updateStageInfo");
      }

      public updateStageInfo_args getEmptyArgsInstance() {
        return new updateStageInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStageInfo_result getResult(I iface, updateStageInfo_args args) throws TException {
        updateStageInfo_result result = new updateStageInfo_result();
        iface.updateStageInfo(args.stage);
        return result;
      }
    }

    public static class updateJobInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateJobInfo_args> {
      public updateJobInfo() {
        super("updateJobInfo");
      }

      public updateJobInfo_args getEmptyArgsInstance() {
        return new updateJobInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateJobInfo_result getResult(I iface, updateJobInfo_args args) throws TException {
        updateJobInfo_result result = new updateJobInfo_result();
        iface.updateJobInfo(args.job);
        return result;
      }
    }

    public static class notifyCommonEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyCommonEvent_args> {
      public notifyCommonEvent() {
        super("notifyCommonEvent");
      }

      public notifyCommonEvent_args getEmptyArgsInstance() {
        return new notifyCommonEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyCommonEvent_result getResult(I iface, notifyCommonEvent_args args) throws TException {
        notifyCommonEvent_result result = new notifyCommonEvent_result();
        iface.notifyCommonEvent(args.event);
        return result;
      }
    }

    public static class notifyTaskEndEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyTaskEndEvent_args> {
      public notifyTaskEndEvent() {
        super("notifyTaskEndEvent");
      }

      public notifyTaskEndEvent_args getEmptyArgsInstance() {
        return new notifyTaskEndEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyTaskEndEvent_result getResult(I iface, notifyTaskEndEvent_args args) throws TException {
        notifyTaskEndEvent_result result = new notifyTaskEndEvent_result();
        iface.notifyTaskEndEvent(args.event);
        return result;
      }
    }

    public static class notifyContainerEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyContainerEvent_args> {
      public notifyContainerEvent() {
        super("notifyContainerEvent");
      }

      public notifyContainerEvent_args getEmptyArgsInstance() {
        return new notifyContainerEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyContainerEvent_result getResult(I iface, notifyContainerEvent_args args) throws TException {
        notifyContainerEvent_result result = new notifyContainerEvent_result();
        iface.notifyContainerEvent(args.evnet);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("updateTaskInfo", new updateTaskInfo());
      processMap.put("updateStageInfo", new updateStageInfo());
      processMap.put("updateJobInfo", new updateJobInfo());
      processMap.put("notifyCommonEvent", new notifyCommonEvent());
      processMap.put("notifyTaskEndEvent", new notifyTaskEndEvent());
      processMap.put("notifyContainerEvent", new notifyContainerEvent());
      return processMap;
    }

    public static class updateTaskInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTaskInfo_args, Void> {
      public updateTaskInfo() {
        super("updateTaskInfo");
      }

      public updateTaskInfo_args getEmptyArgsInstance() {
        return new updateTaskInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateTaskInfo_result result = new updateTaskInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTaskInfo_result result = new updateTaskInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTaskInfo_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateTaskInfo(args.task,resultHandler);
      }
    }

    public static class updateStageInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStageInfo_args, Void> {
      public updateStageInfo() {
        super("updateStageInfo");
      }

      public updateStageInfo_args getEmptyArgsInstance() {
        return new updateStageInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateStageInfo_result result = new updateStageInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStageInfo_result result = new updateStageInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStageInfo_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateStageInfo(args.stage,resultHandler);
      }
    }

    public static class updateJobInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateJobInfo_args, Void> {
      public updateJobInfo() {
        super("updateJobInfo");
      }

      public updateJobInfo_args getEmptyArgsInstance() {
        return new updateJobInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateJobInfo_result result = new updateJobInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateJobInfo_result result = new updateJobInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateJobInfo_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateJobInfo(args.job,resultHandler);
      }
    }

    public static class notifyCommonEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyCommonEvent_args, Void> {
      public notifyCommonEvent() {
        super("notifyCommonEvent");
      }

      public notifyCommonEvent_args getEmptyArgsInstance() {
        return new notifyCommonEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyCommonEvent_result result = new notifyCommonEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyCommonEvent_result result = new notifyCommonEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyCommonEvent_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyCommonEvent(args.event,resultHandler);
      }
    }

    public static class notifyTaskEndEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyTaskEndEvent_args, Void> {
      public notifyTaskEndEvent() {
        super("notifyTaskEndEvent");
      }

      public notifyTaskEndEvent_args getEmptyArgsInstance() {
        return new notifyTaskEndEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyTaskEndEvent_result result = new notifyTaskEndEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyTaskEndEvent_result result = new notifyTaskEndEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyTaskEndEvent_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyTaskEndEvent(args.event,resultHandler);
      }
    }

    public static class notifyContainerEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyContainerEvent_args, Void> {
      public notifyContainerEvent() {
        super("notifyContainerEvent");
      }

      public notifyContainerEvent_args getEmptyArgsInstance() {
        return new notifyContainerEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyContainerEvent_result result = new notifyContainerEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyContainerEvent_result result = new notifyContainerEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyContainerEvent_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyContainerEvent(args.evnet,resultHandler);
      }
    }

  }

  public static class updateTaskInfo_args implements org.apache.thrift.TBase<updateTaskInfo_args, updateTaskInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskInfo_args");

    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskInfo_argsTupleSchemeFactory());
    }

    public TaskInfo task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK((short)1, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskInfo_args.class, metaDataMap);
    }

    public updateTaskInfo_args() {
    }

    public updateTaskInfo_args(
      TaskInfo task)
    {
      this();
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskInfo_args(updateTaskInfo_args other) {
      if (other.isSetTask()) {
        this.task = new TaskInfo(other.task);
      }
    }

    public updateTaskInfo_args deepCopy() {
      return new updateTaskInfo_args(this);
    }

    @Override
    public void clear() {
      this.task = null;
    }

    public TaskInfo getTask() {
      return this.task;
    }

    public updateTaskInfo_args setTask(TaskInfo task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((TaskInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskInfo_args)
        return this.equals((updateTaskInfo_args)that);
      return false;
    }

    public boolean equals(updateTaskInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskInfo_args(");
      boolean first = true;

      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskInfo_argsStandardScheme getScheme() {
        return new updateTaskInfo_argsStandardScheme();
      }
    }

    private static class updateTaskInfo_argsStandardScheme extends StandardScheme<updateTaskInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new TaskInfo();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskInfo_argsTupleScheme getScheme() {
        return new updateTaskInfo_argsTupleScheme();
      }
    }

    private static class updateTaskInfo_argsTupleScheme extends TupleScheme<updateTaskInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task = new TaskInfo();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class updateTaskInfo_result implements org.apache.thrift.TBase<updateTaskInfo_result, updateTaskInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskInfo_result.class, metaDataMap);
    }

    public updateTaskInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskInfo_result(updateTaskInfo_result other) {
    }

    public updateTaskInfo_result deepCopy() {
      return new updateTaskInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskInfo_result)
        return this.equals((updateTaskInfo_result)that);
      return false;
    }

    public boolean equals(updateTaskInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskInfo_resultStandardScheme getScheme() {
        return new updateTaskInfo_resultStandardScheme();
      }
    }

    private static class updateTaskInfo_resultStandardScheme extends StandardScheme<updateTaskInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskInfo_resultTupleScheme getScheme() {
        return new updateTaskInfo_resultTupleScheme();
      }
    }

    private static class updateTaskInfo_resultTupleScheme extends TupleScheme<updateTaskInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateStageInfo_args implements org.apache.thrift.TBase<updateStageInfo_args, updateStageInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStageInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStageInfo_args");

    private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStageInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStageInfo_argsTupleSchemeFactory());
    }

    public StageInfo stage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STAGE((short)1, "stage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STAGE
            return STAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StageInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStageInfo_args.class, metaDataMap);
    }

    public updateStageInfo_args() {
    }

    public updateStageInfo_args(
      StageInfo stage)
    {
      this();
      this.stage = stage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStageInfo_args(updateStageInfo_args other) {
      if (other.isSetStage()) {
        this.stage = new StageInfo(other.stage);
      }
    }

    public updateStageInfo_args deepCopy() {
      return new updateStageInfo_args(this);
    }

    @Override
    public void clear() {
      this.stage = null;
    }

    public StageInfo getStage() {
      return this.stage;
    }

    public updateStageInfo_args setStage(StageInfo stage) {
      this.stage = stage;
      return this;
    }

    public void unsetStage() {
      this.stage = null;
    }

    /** Returns true if field stage is set (has been assigned a value) and false otherwise */
    public boolean isSetStage() {
      return this.stage != null;
    }

    public void setStageIsSet(boolean value) {
      if (!value) {
        this.stage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STAGE:
        if (value == null) {
          unsetStage();
        } else {
          setStage((StageInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STAGE:
        return getStage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STAGE:
        return isSetStage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStageInfo_args)
        return this.equals((updateStageInfo_args)that);
      return false;
    }

    public boolean equals(updateStageInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_stage = true && this.isSetStage();
      boolean that_present_stage = true && that.isSetStage();
      if (this_present_stage || that_present_stage) {
        if (!(this_present_stage && that_present_stage))
          return false;
        if (!this.stage.equals(that.stage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stage = true && (isSetStage());
      list.add(present_stage);
      if (present_stage)
        list.add(stage);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStageInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStageInfo_args(");
      boolean first = true;

      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (stage != null) {
        stage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStageInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateStageInfo_argsStandardScheme getScheme() {
        return new updateStageInfo_argsStandardScheme();
      }
    }

    private static class updateStageInfo_argsStandardScheme extends StandardScheme<updateStageInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStageInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stage = new StageInfo();
                struct.stage.read(iprot);
                struct.setStageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStageInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stage != null) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          struct.stage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStageInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateStageInfo_argsTupleScheme getScheme() {
        return new updateStageInfo_argsTupleScheme();
      }
    }

    private static class updateStageInfo_argsTupleScheme extends TupleScheme<updateStageInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStageInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStage()) {
          struct.stage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStageInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stage = new StageInfo();
          struct.stage.read(iprot);
          struct.setStageIsSet(true);
        }
      }
    }

  }

  public static class updateStageInfo_result implements org.apache.thrift.TBase<updateStageInfo_result, updateStageInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStageInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStageInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStageInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStageInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStageInfo_result.class, metaDataMap);
    }

    public updateStageInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStageInfo_result(updateStageInfo_result other) {
    }

    public updateStageInfo_result deepCopy() {
      return new updateStageInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStageInfo_result)
        return this.equals((updateStageInfo_result)that);
      return false;
    }

    public boolean equals(updateStageInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStageInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStageInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStageInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateStageInfo_resultStandardScheme getScheme() {
        return new updateStageInfo_resultStandardScheme();
      }
    }

    private static class updateStageInfo_resultStandardScheme extends StandardScheme<updateStageInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStageInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStageInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStageInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateStageInfo_resultTupleScheme getScheme() {
        return new updateStageInfo_resultTupleScheme();
      }
    }

    private static class updateStageInfo_resultTupleScheme extends TupleScheme<updateStageInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStageInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStageInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateJobInfo_args implements org.apache.thrift.TBase<updateJobInfo_args, updateJobInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateJobInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJobInfo_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJobInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJobInfo_argsTupleSchemeFactory());
    }

    public JobInfo job; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short)1, "job");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB
            return JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJobInfo_args.class, metaDataMap);
    }

    public updateJobInfo_args() {
    }

    public updateJobInfo_args(
      JobInfo job)
    {
      this();
      this.job = job;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJobInfo_args(updateJobInfo_args other) {
      if (other.isSetJob()) {
        this.job = new JobInfo(other.job);
      }
    }

    public updateJobInfo_args deepCopy() {
      return new updateJobInfo_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
    }

    public JobInfo getJob() {
      return this.job;
    }

    public updateJobInfo_args setJob(JobInfo job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((JobInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJobInfo_args)
        return this.equals((updateJobInfo_args)that);
      return false;
    }

    public boolean equals(updateJobInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_job = true && (isSetJob());
      list.add(present_job);
      if (present_job)
        list.add(job);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateJobInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJobInfo_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJobInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateJobInfo_argsStandardScheme getScheme() {
        return new updateJobInfo_argsStandardScheme();
      }
    }

    private static class updateJobInfo_argsStandardScheme extends StandardScheme<updateJobInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJobInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new JobInfo();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJobInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJobInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateJobInfo_argsTupleScheme getScheme() {
        return new updateJobInfo_argsTupleScheme();
      }
    }

    private static class updateJobInfo_argsTupleScheme extends TupleScheme<updateJobInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJobInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJobInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.job = new JobInfo();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
      }
    }

  }

  public static class updateJobInfo_result implements org.apache.thrift.TBase<updateJobInfo_result, updateJobInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateJobInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJobInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJobInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJobInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJobInfo_result.class, metaDataMap);
    }

    public updateJobInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJobInfo_result(updateJobInfo_result other) {
    }

    public updateJobInfo_result deepCopy() {
      return new updateJobInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJobInfo_result)
        return this.equals((updateJobInfo_result)that);
      return false;
    }

    public boolean equals(updateJobInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateJobInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJobInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJobInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateJobInfo_resultStandardScheme getScheme() {
        return new updateJobInfo_resultStandardScheme();
      }
    }

    private static class updateJobInfo_resultStandardScheme extends StandardScheme<updateJobInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJobInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJobInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJobInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateJobInfo_resultTupleScheme getScheme() {
        return new updateJobInfo_resultTupleScheme();
      }
    }

    private static class updateJobInfo_resultTupleScheme extends TupleScheme<updateJobInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJobInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJobInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifyCommonEvent_args implements org.apache.thrift.TBase<notifyCommonEvent_args, notifyCommonEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyCommonEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyCommonEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyCommonEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyCommonEvent_argsTupleSchemeFactory());
    }

    public SchedulerEvent event; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT((short)1, "event");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT
            return EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "SchedulerEvent")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyCommonEvent_args.class, metaDataMap);
    }

    public notifyCommonEvent_args() {
    }

    public notifyCommonEvent_args(
      SchedulerEvent event)
    {
      this();
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyCommonEvent_args(notifyCommonEvent_args other) {
      if (other.isSetEvent()) {
        this.event = other.event;
      }
    }

    public notifyCommonEvent_args deepCopy() {
      return new notifyCommonEvent_args(this);
    }

    @Override
    public void clear() {
      this.event = null;
    }

    public SchedulerEvent getEvent() {
      return this.event;
    }

    public notifyCommonEvent_args setEvent(SchedulerEvent event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((SchedulerEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT:
        return getEvent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT:
        return isSetEvent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyCommonEvent_args)
        return this.equals((notifyCommonEvent_args)that);
      return false;
    }

    public boolean equals(notifyCommonEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_event = true && (isSetEvent());
      list.add(present_event);
      if (present_event)
        list.add(event);

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyCommonEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyCommonEvent_args(");
      boolean first = true;

      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyCommonEvent_argsStandardSchemeFactory implements SchemeFactory {
      public notifyCommonEvent_argsStandardScheme getScheme() {
        return new notifyCommonEvent_argsStandardScheme();
      }
    }

    private static class notifyCommonEvent_argsStandardScheme extends StandardScheme<notifyCommonEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyCommonEvent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new SchedulerEvent();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyCommonEvent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyCommonEvent_argsTupleSchemeFactory implements SchemeFactory {
      public notifyCommonEvent_argsTupleScheme getScheme() {
        return new notifyCommonEvent_argsTupleScheme();
      }
    }

    private static class notifyCommonEvent_argsTupleScheme extends TupleScheme<notifyCommonEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyCommonEvent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEvent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyCommonEvent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.event = new SchedulerEvent();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
      }
    }

  }

  public static class notifyCommonEvent_result implements org.apache.thrift.TBase<notifyCommonEvent_result, notifyCommonEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyCommonEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyCommonEvent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyCommonEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyCommonEvent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyCommonEvent_result.class, metaDataMap);
    }

    public notifyCommonEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyCommonEvent_result(notifyCommonEvent_result other) {
    }

    public notifyCommonEvent_result deepCopy() {
      return new notifyCommonEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyCommonEvent_result)
        return this.equals((notifyCommonEvent_result)that);
      return false;
    }

    public boolean equals(notifyCommonEvent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyCommonEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyCommonEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyCommonEvent_resultStandardSchemeFactory implements SchemeFactory {
      public notifyCommonEvent_resultStandardScheme getScheme() {
        return new notifyCommonEvent_resultStandardScheme();
      }
    }

    private static class notifyCommonEvent_resultStandardScheme extends StandardScheme<notifyCommonEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyCommonEvent_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyCommonEvent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyCommonEvent_resultTupleSchemeFactory implements SchemeFactory {
      public notifyCommonEvent_resultTupleScheme getScheme() {
        return new notifyCommonEvent_resultTupleScheme();
      }
    }

    private static class notifyCommonEvent_resultTupleScheme extends TupleScheme<notifyCommonEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyCommonEvent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyCommonEvent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifyTaskEndEvent_args implements org.apache.thrift.TBase<notifyTaskEndEvent_args, notifyTaskEndEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTaskEndEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTaskEndEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyTaskEndEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyTaskEndEvent_argsTupleSchemeFactory());
    }

    public TaskEndEvent event; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT((short)1, "event");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT
            return EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "TaskEndEvent")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTaskEndEvent_args.class, metaDataMap);
    }

    public notifyTaskEndEvent_args() {
    }

    public notifyTaskEndEvent_args(
      TaskEndEvent event)
    {
      this();
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTaskEndEvent_args(notifyTaskEndEvent_args other) {
      if (other.isSetEvent()) {
        this.event = other.event;
      }
    }

    public notifyTaskEndEvent_args deepCopy() {
      return new notifyTaskEndEvent_args(this);
    }

    @Override
    public void clear() {
      this.event = null;
    }

    public TaskEndEvent getEvent() {
      return this.event;
    }

    public notifyTaskEndEvent_args setEvent(TaskEndEvent event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((TaskEndEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT:
        return getEvent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT:
        return isSetEvent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTaskEndEvent_args)
        return this.equals((notifyTaskEndEvent_args)that);
      return false;
    }

    public boolean equals(notifyTaskEndEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_event = true && (isSetEvent());
      list.add(present_event);
      if (present_event)
        list.add(event);

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyTaskEndEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyTaskEndEvent_args(");
      boolean first = true;

      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTaskEndEvent_argsStandardSchemeFactory implements SchemeFactory {
      public notifyTaskEndEvent_argsStandardScheme getScheme() {
        return new notifyTaskEndEvent_argsStandardScheme();
      }
    }

    private static class notifyTaskEndEvent_argsStandardScheme extends StandardScheme<notifyTaskEndEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTaskEndEvent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new TaskEndEvent();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTaskEndEvent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTaskEndEvent_argsTupleSchemeFactory implements SchemeFactory {
      public notifyTaskEndEvent_argsTupleScheme getScheme() {
        return new notifyTaskEndEvent_argsTupleScheme();
      }
    }

    private static class notifyTaskEndEvent_argsTupleScheme extends TupleScheme<notifyTaskEndEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTaskEndEvent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEvent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTaskEndEvent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.event = new TaskEndEvent();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
      }
    }

  }

  public static class notifyTaskEndEvent_result implements org.apache.thrift.TBase<notifyTaskEndEvent_result, notifyTaskEndEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTaskEndEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTaskEndEvent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyTaskEndEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyTaskEndEvent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTaskEndEvent_result.class, metaDataMap);
    }

    public notifyTaskEndEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTaskEndEvent_result(notifyTaskEndEvent_result other) {
    }

    public notifyTaskEndEvent_result deepCopy() {
      return new notifyTaskEndEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTaskEndEvent_result)
        return this.equals((notifyTaskEndEvent_result)that);
      return false;
    }

    public boolean equals(notifyTaskEndEvent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyTaskEndEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyTaskEndEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTaskEndEvent_resultStandardSchemeFactory implements SchemeFactory {
      public notifyTaskEndEvent_resultStandardScheme getScheme() {
        return new notifyTaskEndEvent_resultStandardScheme();
      }
    }

    private static class notifyTaskEndEvent_resultStandardScheme extends StandardScheme<notifyTaskEndEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTaskEndEvent_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTaskEndEvent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTaskEndEvent_resultTupleSchemeFactory implements SchemeFactory {
      public notifyTaskEndEvent_resultTupleScheme getScheme() {
        return new notifyTaskEndEvent_resultTupleScheme();
      }
    }

    private static class notifyTaskEndEvent_resultTupleScheme extends TupleScheme<notifyTaskEndEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTaskEndEvent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTaskEndEvent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifyContainerEvent_args implements org.apache.thrift.TBase<notifyContainerEvent_args, notifyContainerEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyContainerEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyContainerEvent_args");

    private static final org.apache.thrift.protocol.TField EVNET_FIELD_DESC = new org.apache.thrift.protocol.TField("evnet", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyContainerEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyContainerEvent_argsTupleSchemeFactory());
    }

    public ContainerEvent evnet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVNET((short)1, "evnet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVNET
            return EVNET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVNET, new org.apache.thrift.meta_data.FieldMetaData("evnet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "ContainerEvent")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyContainerEvent_args.class, metaDataMap);
    }

    public notifyContainerEvent_args() {
    }

    public notifyContainerEvent_args(
      ContainerEvent evnet)
    {
      this();
      this.evnet = evnet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyContainerEvent_args(notifyContainerEvent_args other) {
      if (other.isSetEvnet()) {
        this.evnet = other.evnet;
      }
    }

    public notifyContainerEvent_args deepCopy() {
      return new notifyContainerEvent_args(this);
    }

    @Override
    public void clear() {
      this.evnet = null;
    }

    public ContainerEvent getEvnet() {
      return this.evnet;
    }

    public notifyContainerEvent_args setEvnet(ContainerEvent evnet) {
      this.evnet = evnet;
      return this;
    }

    public void unsetEvnet() {
      this.evnet = null;
    }

    /** Returns true if field evnet is set (has been assigned a value) and false otherwise */
    public boolean isSetEvnet() {
      return this.evnet != null;
    }

    public void setEvnetIsSet(boolean value) {
      if (!value) {
        this.evnet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVNET:
        if (value == null) {
          unsetEvnet();
        } else {
          setEvnet((ContainerEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVNET:
        return getEvnet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVNET:
        return isSetEvnet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyContainerEvent_args)
        return this.equals((notifyContainerEvent_args)that);
      return false;
    }

    public boolean equals(notifyContainerEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_evnet = true && this.isSetEvnet();
      boolean that_present_evnet = true && that.isSetEvnet();
      if (this_present_evnet || that_present_evnet) {
        if (!(this_present_evnet && that_present_evnet))
          return false;
        if (!this.evnet.equals(that.evnet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_evnet = true && (isSetEvnet());
      list.add(present_evnet);
      if (present_evnet)
        list.add(evnet);

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyContainerEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEvnet()).compareTo(other.isSetEvnet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvnet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evnet, other.evnet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyContainerEvent_args(");
      boolean first = true;

      sb.append("evnet:");
      if (this.evnet == null) {
        sb.append("null");
      } else {
        sb.append(this.evnet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyContainerEvent_argsStandardSchemeFactory implements SchemeFactory {
      public notifyContainerEvent_argsStandardScheme getScheme() {
        return new notifyContainerEvent_argsStandardScheme();
      }
    }

    private static class notifyContainerEvent_argsStandardScheme extends StandardScheme<notifyContainerEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyContainerEvent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVNET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.evnet = new ContainerEvent();
                struct.evnet.read(iprot);
                struct.setEvnetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyContainerEvent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.evnet != null) {
          oprot.writeFieldBegin(EVNET_FIELD_DESC);
          struct.evnet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyContainerEvent_argsTupleSchemeFactory implements SchemeFactory {
      public notifyContainerEvent_argsTupleScheme getScheme() {
        return new notifyContainerEvent_argsTupleScheme();
      }
    }

    private static class notifyContainerEvent_argsTupleScheme extends TupleScheme<notifyContainerEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyContainerEvent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEvnet()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEvnet()) {
          struct.evnet.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyContainerEvent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.evnet = new ContainerEvent();
          struct.evnet.read(iprot);
          struct.setEvnetIsSet(true);
        }
      }
    }

  }

  public static class notifyContainerEvent_result implements org.apache.thrift.TBase<notifyContainerEvent_result, notifyContainerEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyContainerEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyContainerEvent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyContainerEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyContainerEvent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyContainerEvent_result.class, metaDataMap);
    }

    public notifyContainerEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyContainerEvent_result(notifyContainerEvent_result other) {
    }

    public notifyContainerEvent_result deepCopy() {
      return new notifyContainerEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyContainerEvent_result)
        return this.equals((notifyContainerEvent_result)that);
      return false;
    }

    public boolean equals(notifyContainerEvent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyContainerEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyContainerEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyContainerEvent_resultStandardSchemeFactory implements SchemeFactory {
      public notifyContainerEvent_resultStandardScheme getScheme() {
        return new notifyContainerEvent_resultStandardScheme();
      }
    }

    private static class notifyContainerEvent_resultStandardScheme extends StandardScheme<notifyContainerEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyContainerEvent_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyContainerEvent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyContainerEvent_resultTupleSchemeFactory implements SchemeFactory {
      public notifyContainerEvent_resultTupleScheme getScheme() {
        return new notifyContainerEvent_resultTupleScheme();
      }
    }

    private static class notifyContainerEvent_resultTupleScheme extends TupleScheme<notifyContainerEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyContainerEvent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyContainerEvent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
